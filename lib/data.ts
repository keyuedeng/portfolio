// TO ADD NEW PROJECT: Copy this template and add it to the projects array below
// {
//   id: unique_number,
//   title: "Project Title",
//   description: "Brief description for project cards",
//   longDescription: "Detailed description explaining the project purpose and what it solves",
//   tools: ["Technology1", "Technology2", "Technology3"],
//   status: "Completed" or "In Progress",
//   duration: "X months",
//   teamSize: "Solo project" or "Team of X",
//   image: "/project-image.png",
//   githubLink: "https://github.com/username/project-name",
//   liveLink: "https://project-demo.com" or null,
//   keyTakeaways: [
//     "What you learned 1",
//     "What you learned 2",
//     "What you learned 3",
//   ],
//   challenges: [
//     "Challenge you overcame 1",
//     "Challenge you overcame 2", 
//     "Challenge you overcame 3",
//   ],
// },

export const projects = [
  {
    id: 1,
    title: "Tool-Calling CLI Assistant",
    description: "A modular command-line assistant powered by OpenAI’s GPT-4o-mini, featuring secure function calling, tool execution, and an interactive terminal interface.",
    longDescription: "Designed to streamline and experiment with LLM-based workflows, this project integrates GPT-4o-mini with an extensible Python-based tool system. It uses modern practices like async programming, environment-based config management, type hinting, and modular architecture to demonstrate scalable, real-world AI integration in the CLI.",
    tools: ["Python", "OpenAI API", "uv", "dotenv", "Rich", "Pydantic", "Asyncio"],
    status: "Completed",
    duration: "2 weeks",
    teamSize: "Solo project",
    image: "/cli_example.png",
    githubLink: "https://github.com/keyuedeng/AI-CLI-Assistant",
    liveLink: null,
    keyTakeaways: [
      "Built an extensible architecture using abstract base classes and the registry pattern",
      "Implemented OpenAI's function-calling API with robust async support",
      "Used Rich to create an interactive, user-friendly CLI experience",
      "Learned how to structure and manage a real project end-to-end — my first large-scale personal build",
    ],
    challenges: [
      "Designing a tool system that scales cleanly with additional functionality",
      "Handling asynchronous function calls and error states effectively",
      "Ensuring safe and secure configuration through environment variables",
    ],
  },
  {
    id: 2,
    title: "Todo Widget",
    description: "A desktop todo widget built with Electron featuring pixel art design, always-on-top functionality, and local data persistence.",
    longDescription: "A desktop todo widget built with Electron that provides a clean, always-on-top interface for managing daily tasks. The widget features a beautiful pixel art design with a transparent background and blur effect, making it blend seamlessly with your desktop while staying accessible. Users can add, complete, and delete tasks with real-time progress tracking through a visual progress bar. The widget automatically positions itself on the right side of the screen and minimizes to the system tray when closed, ensuring it's always available without cluttering the desktop. All data is persisted locally using localStorage, providing a private and fast task management experience.",
    tools: ["Electron", "Node.js", "HTML", "CSS", "JavaScript", "localStorage"],
    status: "Completed",
    duration: "3 days",
    teamSize: "Solo project",
    image: "/todo.png",
    githubLink: "https://github.com/keyuedeng/ToDoWidget",
    liveLink: null,
    keyTakeaways: [
      "Learned to build desktop applications using Electron framework",
      "Implemented always-on-top functionality and system tray integration",
      "Created a frameless window with transparent background and blur effects",
      "Built a complete desktop widget with data persistence using localStorage",
      "Gained experience with Electron's main and renderer process architecture",
    ],
    challenges: [
      "Implementing always-on-top functionality while maintaining good UX",
      "Creating a frameless window that still allows user interaction and positioning",
      "Managing data persistence across application restarts using localStorage",
      "Designing a widget that integrates seamlessly with the desktop environment",
    ],
  },
  {
    id: 3,
    title: "Study Tracker",
    description: "Trackly is a minimalist study tracker app designed for students to log sessions, visualize progress, and build consistent study habits.",
    longDescription: `I'm building Trackly as a study tracker to solve a problem I've faced myself: keeping track of how much I actually study and staying consistent 
    with my habits. Instead of being cluttered or overwhelming, I designed Trackly to feel simple, clean, and motivating. The app gives me a dashboard where I 
    can instantly see my total study hours, current streak, and how my time is split across subjects. I added a heatmap calendar inspired by GitHub's contributions chart, 
    a line graph showing daily study hours, and a subject breakdown donut chart to make the data visual and engaging. When I log a new study session, I can pick the subject, 
    add the duration, and see it reflected immediately in my stats. My goal is to make the flow as frictionless as possible, while still giving me insights into how I'm spending my time.
    I'm building Trackly using Next.js, Tailwind, and Recharts, focusing on both design and functionality. I aim to make the app work smoothly across desktop and mobile, and it's one of my favorite 
    projects because it represents my ability to bring together front-end design, component-driven architecture, and data visualization — all to create something I'd actually use in my own daily routine.`,
    tools: ["Next.js", "JavaScript", "Tailwind CSS", "Recharts", "React", "shadcn/ui", "PostgreSQL"],
    status: "In progress",
    duration: "3 weeks",
    teamSize: "Solo project",
    image: "/trackly.png",
    githubLink: "https://github.com/keyuedeng/Trackly",
    liveLink: null,
    keyTakeaways: [
      "Learned how to structure a multi-page app with clear separation between public and private routes.",
      "Learned how to build a component-driven UI in React/Next.js and structure a dashboard with reusable components.",
      "Gained hands-on experience with Tailwind CSS and shadcn/ui for rapid styling and responsive design.",
      "Implemented interactive charts using Recharts (line graphs, donut charts, heatmap calendar) to visualize study data.",
      "Developed a PostgreSQL database to store and manage study session data, gaining practical experience with database design and querying.",
      "Understood the full cycle of CRUD operations in a full-stack app.",
      "Strengthened skills in responsive design, ensuring the app worked smoothly across mobile and desktop."
    ],
    challenges: [
      "Handling state management (like toggling mobile menus, tracking filters, or managing study sessions).",
      "Ensuring responsiveness across desktop and mobile without breaking layouts.",
      "Handling authentication and protected routes in Next.js effectively.",
      "Implementing form handling and validation for adding and editing study sessions smoothly.",
    ],
  },
] 